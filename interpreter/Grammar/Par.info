-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Grammar/Par.y
-----------------------------------------------------------------------------

state 0 contains 1 reduce/reduce conflicts.
state 3 contains 1 shift/reduce conflicts.
state 8 contains 2 reduce/reduce conflicts.
state 13 contains 1 shift/reduce conflicts.
state 16 contains 1 shift/reduce conflicts.
state 43 contains 1 reduce/reduce conflicts.
state 44 contains 1 reduce/reduce conflicts.
state 45 contains 1 shift/reduce conflicts.
state 51 contains 1 shift/reduce conflicts.
state 81 contains 2 reduce/reduce conflicts.
state 90 contains 1 shift/reduce conflicts.
state 110 contains 1 reduce/reduce conflicts.
state 116 contains 1 reduce/reduce conflicts.
state 141 contains 1 reduce/reduce conflicts.
state 145 contains 1 reduce/reduce conflicts.

rule 6 is unused
rule 26 is unused
rule 27 is unused
rule 28 is unused
rule 29 is unused
rule 30 is unused
rule 44 is unused
rule 45 is unused
rule 46 is unused
rule 88 is unused
rule 89 is unused
rule 90 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListStmt                                (4)
	Block -> '{' ListStmt '}'                          (5)
	ListStmt ->                                        (6)
	ListStmt -> Stmt ListStmt                          (7)
	ListStmt ->                                        (8)
	ListStmt -> Stmt                                   (9)
	ListStmt -> Stmt ';' ListStmt                      (10)
	Stmt -> Type Item                                  (11)
	Stmt -> Expr ';'                                   (12)
	Stmt -> 'if' '(' Expr ')' Block                    (13)
	Stmt -> 'if' '(' Expr ')' Block 'else' Block       (14)
	Stmt -> 'while' '(' Expr ')' Block                 (15)
	Stmt -> 'for' '(' Ident 'from' Expr 'to' Expr ')' Block   (16)
	Stmt -> 'print' '(' ListExpr ')' ';'               (17)
	Stmt -> 'printEndl' '(' ListExpr ')' ';'           (18)
	Stmt -> 'return' Expr ';'                          (19)
	Stmt -> 'return' ';'                               (20)
	Stmt -> Ident '=' Expr ';'                         (21)
	Stmt -> 'fun' Ident '(' ListArg ')' '->' Type Block   (22)
	Stmt -> Ident '.' 'push' '(' Expr ')'              (23)
	Item -> Ident                                      (24)
	Item -> Ident '=' Expr                             (25)
	ListItem -> Item                                   (26)
	ListItem -> Item ',' ListItem                      (27)
	ListExpr ->                                        (28)
	ListExpr -> Expr                                   (29)
	ListExpr -> Expr ',' ListExpr                      (30)
	ListExpr ->                                        (31)
	ListExpr -> Expr                                   (32)
	ListExpr -> Expr ',' ListExpr                      (33)
	Arg -> TypeOrRef Ident                             (34)
	ListArg ->                                         (35)
	ListArg -> Arg                                     (36)
	ListArg -> Arg ',' ListArg                         (37)
	Type -> 'int'                                      (38)
	Type -> 'bool'                                     (39)
	Type -> 'string'                                   (40)
	Type -> 'void'                                     (41)
	Type -> 'list' '<' Type '>'                        (42)
	Type -> 'lambda' '<' '(' ListTypeOrRef ')' '->' Type '>'   (43)
	ListType ->                                        (44)
	ListType -> Type                                   (45)
	ListType -> Type ',' ListType                      (46)
	TypeOrRef -> Type                                  (47)
	TypeOrRef -> '&' Type                              (48)
	ListTypeOrRef ->                                   (49)
	ListTypeOrRef -> TypeOrRef                         (50)
	ListTypeOrRef -> TypeOrRef ',' ListTypeOrRef       (51)
	AddOp -> '+'                                       (52)
	AddOp -> '-'                                       (53)
	MulOp -> '*'                                       (54)
	MulOp -> '/'                                       (55)
	MulOp -> '%'                                       (56)
	RelOp -> '<'                                       (57)
	RelOp -> '<='                                      (58)
	RelOp -> '>'                                       (59)
	RelOp -> '>='                                      (60)
	RelOp -> '=='                                      (61)
	RelOp -> '!='                                      (62)
	Expr -> Expr1 'or' Expr                            (63)
	Expr -> Expr1                                      (64)
	Expr1 -> Expr2 'and' Expr1                         (65)
	Expr1 -> Expr2                                     (66)
	Expr2 -> Expr2 RelOp Expr3                         (67)
	Expr2 -> Expr3                                     (68)
	Expr3 -> Expr3 AddOp Expr4                         (69)
	Expr3 -> Expr4                                     (70)
	Expr4 -> Expr4 MulOp Expr5                         (71)
	Expr4 -> Expr5                                     (72)
	Expr5 -> '-' Expr6                                 (73)
	Expr5 -> 'not' Expr6                               (74)
	Expr5 -> Expr6                                     (75)
	Expr5 -> Expr6 '.' 'len()'                         (76)
	Expr5 -> Expr6 '.' 'at' '(' Expr6 ')'              (77)
	Expr6 -> Expr6 '(' ListExprOrRef ')'               (78)
	Expr6 -> Expr7                                     (79)
	Expr7 -> Integer                                   (80)
	Expr7 -> Ident                                     (81)
	Expr7 -> 'true'                                    (82)
	Expr7 -> 'false'                                   (83)
	Expr7 -> Type '[]'                                 (84)
	Expr7 -> String                                    (85)
	Expr7 -> '(' ListArg ')' '->' Type Block           (86)
	Expr7 -> '(' Expr ')'                              (87)
	ListIdent ->                                       (88)
	ListIdent -> Ident                                 (89)
	ListIdent -> Ident ',' ListIdent                   (90)
	ExprOrRef -> Expr                                  (91)
	ExprOrRef -> '&' Ident                             (92)
	ListExprOrRef ->                                   (93)
	ListExprOrRef -> ExprOrRef                         (94)
	ListExprOrRef -> ExprOrRef ',' ListExprOrRef       (95)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!='           { PT _ (TS _ 1) }
	'%'            { PT _ (TS _ 2) }
	'&'            { PT _ (TS _ 3) }
	'('            { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'+'            { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'-'            { PT _ (TS _ 9) }
	'->'           { PT _ (TS _ 10) }
	'.'            { PT _ (TS _ 11) }
	'/'            { PT _ (TS _ 12) }
	';'            { PT _ (TS _ 13) }
	'<'            { PT _ (TS _ 14) }
	'<='           { PT _ (TS _ 15) }
	'='            { PT _ (TS _ 16) }
	'=='           { PT _ (TS _ 17) }
	'>'            { PT _ (TS _ 18) }
	'>='           { PT _ (TS _ 19) }
	'[]'           { PT _ (TS _ 20) }
	'and'          { PT _ (TS _ 21) }
	'at'           { PT _ (TS _ 22) }
	'bool'         { PT _ (TS _ 23) }
	'else'         { PT _ (TS _ 24) }
	'false'        { PT _ (TS _ 25) }
	'for'          { PT _ (TS _ 26) }
	'from'         { PT _ (TS _ 27) }
	'fun'          { PT _ (TS _ 28) }
	'if'           { PT _ (TS _ 29) }
	'int'          { PT _ (TS _ 30) }
	'lambda'       { PT _ (TS _ 31) }
	'len()'        { PT _ (TS _ 32) }
	'list'         { PT _ (TS _ 33) }
	'not'          { PT _ (TS _ 34) }
	'or'           { PT _ (TS _ 35) }
	'print'        { PT _ (TS _ 36) }
	'printEndl'    { PT _ (TS _ 37) }
	'push'         { PT _ (TS _ 38) }
	'return'       { PT _ (TS _ 39) }
	'string'       { PT _ (TS _ 40) }
	'to'           { PT _ (TS _ 41) }
	'true'         { PT _ (TS _ 42) }
	'void'         { PT _ (TS _ 43) }
	'while'        { PT _ (TS _ 44) }
	'{'            { PT _ (TS _ 45) }
	'}'            { PT _ (TS _ 46) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	Block           rule  5
	ListStmt        rules 6, 7, 8, 9, 10
	Stmt            rules 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Item            rules 24, 25
	ListItem        rules 26, 27
	ListExpr        rules 28, 29, 30, 31, 32, 33
	Arg             rule  34
	ListArg         rules 35, 36, 37
	Type            rules 38, 39, 40, 41, 42, 43
	ListType        rules 44, 45, 46
	TypeOrRef       rules 47, 48
	ListTypeOrRef   rules 49, 50, 51
	AddOp           rules 52, 53
	MulOp           rules 54, 55, 56
	RelOp           rules 57, 58, 59, 60, 61, 62
	Expr            rules 63, 64
	Expr1           rules 65, 66
	Expr2           rules 67, 68
	Expr3           rules 69, 70
	Expr4           rules 71, 72
	Expr5           rules 73, 74, 75, 76, 77
	Expr6           rules 78, 79
	Expr7           rules 80, 81, 82, 83, 84, 85, 86, 87
	ListIdent       rules 88, 89, 90
	ExprOrRef       rules 91, 92
	ListExprOrRef   rules 93, 94, 95

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'for'          shift, and enter state 22
	'fun'          shift, and enter state 23
	'if'           shift, and enter state 24
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'print'        shift, and enter state 29
	'printEndl'    shift, and enter state 30
	'return'       shift, and enter state 31
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	'while'        shift, and enter state 35
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37
	%eof           reduce using rule 8
			(reduce using rule 6)


	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	Program        goto state 6
	ListStmt       goto state 7
	Stmt           goto state 8
	Type           goto state 9
	Expr           goto state 10
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'.'            reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'bool'         reduce using rule 1
	'false'        reduce using rule 1
	'for'          reduce using rule 1
	'from'         reduce using rule 1
	'fun'          reduce using rule 1
	'if'           reduce using rule 1
	'int'          reduce using rule 1
	'lambda'       reduce using rule 1
	'list'         reduce using rule 1
	'not'          reduce using rule 1
	'or'           reduce using rule 1
	'print'        reduce using rule 1
	'printEndl'    reduce using rule 1
	'return'       reduce using rule 1
	'string'       reduce using rule 1
	'to'           reduce using rule 1
	'true'         reduce using rule 1
	'void'         reduce using rule 1
	'while'        reduce using rule 1
	'}'            reduce using rule 1
	L_Ident        reduce using rule 1
	L_integ        reduce using rule 1
	L_quoted       reduce using rule 1
	%eof           reduce using rule 1


State 3

	Stmt -> Ident . '=' Expr ';'                        (rule 21)
	Stmt -> Ident . '.' 'push' '(' Expr ')'             (rule 23)
	Expr7 -> Ident .                                    (rule 81)

	'!='           reduce using rule 81
	'%'            reduce using rule 81
	'('            reduce using rule 81
	'*'            reduce using rule 81
	'+'            reduce using rule 81
	'-'            reduce using rule 81
	'.'            shift, and enter state 82
			(reduce using rule 81)

	'/'            reduce using rule 81
	';'            reduce using rule 81
	'<'            reduce using rule 81
	'<='           reduce using rule 81
	'='            shift, and enter state 83
	'=='           reduce using rule 81
	'>'            reduce using rule 81
	'>='           reduce using rule 81
	'and'          reduce using rule 81
	'or'           reduce using rule 81


State 4

	Expr7 -> Integer .                                  (rule 80)

	'!='           reduce using rule 80
	'%'            reduce using rule 80
	'('            reduce using rule 80
	')'            reduce using rule 80
	'*'            reduce using rule 80
	'+'            reduce using rule 80
	','            reduce using rule 80
	'-'            reduce using rule 80
	'.'            reduce using rule 80
	'/'            reduce using rule 80
	';'            reduce using rule 80
	'<'            reduce using rule 80
	'<='           reduce using rule 80
	'=='           reduce using rule 80
	'>'            reduce using rule 80
	'>='           reduce using rule 80
	'and'          reduce using rule 80
	'bool'         reduce using rule 80
	'false'        reduce using rule 80
	'for'          reduce using rule 80
	'fun'          reduce using rule 80
	'if'           reduce using rule 80
	'int'          reduce using rule 80
	'lambda'       reduce using rule 80
	'list'         reduce using rule 80
	'not'          reduce using rule 80
	'or'           reduce using rule 80
	'print'        reduce using rule 80
	'printEndl'    reduce using rule 80
	'return'       reduce using rule 80
	'string'       reduce using rule 80
	'to'           reduce using rule 80
	'true'         reduce using rule 80
	'void'         reduce using rule 80
	'while'        reduce using rule 80
	'}'            reduce using rule 80
	L_Ident        reduce using rule 80
	L_integ        reduce using rule 80
	L_quoted       reduce using rule 80
	%eof           reduce using rule 80


State 5

	Expr7 -> String .                                   (rule 85)

	'!='           reduce using rule 85
	'%'            reduce using rule 85
	'('            reduce using rule 85
	')'            reduce using rule 85
	'*'            reduce using rule 85
	'+'            reduce using rule 85
	','            reduce using rule 85
	'-'            reduce using rule 85
	'.'            reduce using rule 85
	'/'            reduce using rule 85
	';'            reduce using rule 85
	'<'            reduce using rule 85
	'<='           reduce using rule 85
	'=='           reduce using rule 85
	'>'            reduce using rule 85
	'>='           reduce using rule 85
	'and'          reduce using rule 85
	'bool'         reduce using rule 85
	'false'        reduce using rule 85
	'for'          reduce using rule 85
	'fun'          reduce using rule 85
	'if'           reduce using rule 85
	'int'          reduce using rule 85
	'lambda'       reduce using rule 85
	'list'         reduce using rule 85
	'not'          reduce using rule 85
	'or'           reduce using rule 85
	'print'        reduce using rule 85
	'printEndl'    reduce using rule 85
	'return'       reduce using rule 85
	'string'       reduce using rule 85
	'to'           reduce using rule 85
	'true'         reduce using rule 85
	'void'         reduce using rule 85
	'while'        reduce using rule 85
	'}'            reduce using rule 85
	L_Ident        reduce using rule 85
	L_integ        reduce using rule 85
	L_quoted       reduce using rule 85
	%eof           reduce using rule 85


State 6

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 7

	Program -> ListStmt .                               (rule 4)

	%eof           reduce using rule 4


State 8

	ListStmt -> Stmt . ListStmt                         (rule 7)
	ListStmt -> Stmt .                                  (rule 9)
	ListStmt -> Stmt . ';' ListStmt                     (rule 10)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 81
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'for'          shift, and enter state 22
	'fun'          shift, and enter state 23
	'if'           shift, and enter state 24
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'print'        shift, and enter state 29
	'printEndl'    shift, and enter state 30
	'return'       shift, and enter state 31
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	'while'        shift, and enter state 35
	'}'            reduce using rule 9
			(reduce using rule 8)
			(reduce using rule 6)

	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37
	%eof           reduce using rule 9
			(reduce using rule 8)
			(reduce using rule 6)


	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	ListStmt       goto state 80
	Stmt           goto state 8
	Type           goto state 9
	Expr           goto state 10
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 9

	Stmt -> Type . Item                                 (rule 11)
	Expr7 -> Type . '[]'                                (rule 84)

	'[]'           shift, and enter state 79
	L_Ident        shift, and enter state 2

	Ident          goto state 77
	Item           goto state 78

State 10

	Stmt -> Expr . ';'                                  (rule 12)

	';'            shift, and enter state 76


State 11

	Expr -> Expr1 . 'or' Expr                           (rule 63)
	Expr -> Expr1 .                                     (rule 64)

	'('            reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	';'            reduce using rule 64
	'bool'         reduce using rule 64
	'false'        reduce using rule 64
	'for'          reduce using rule 64
	'fun'          reduce using rule 64
	'if'           reduce using rule 64
	'int'          reduce using rule 64
	'lambda'       reduce using rule 64
	'list'         reduce using rule 64
	'not'          reduce using rule 64
	'or'           shift, and enter state 75
	'print'        reduce using rule 64
	'printEndl'    reduce using rule 64
	'return'       reduce using rule 64
	'string'       reduce using rule 64
	'to'           reduce using rule 64
	'true'         reduce using rule 64
	'void'         reduce using rule 64
	'while'        reduce using rule 64
	'}'            reduce using rule 64
	L_Ident        reduce using rule 64
	L_integ        reduce using rule 64
	L_quoted       reduce using rule 64
	%eof           reduce using rule 64


State 12

	Expr1 -> Expr2 . 'and' Expr1                        (rule 65)
	Expr1 -> Expr2 .                                    (rule 66)
	Expr2 -> Expr2 . RelOp Expr3                        (rule 67)

	'!='           shift, and enter state 68
	'('            reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	';'            reduce using rule 66
	'<'            shift, and enter state 69
	'<='           shift, and enter state 70
	'=='           shift, and enter state 71
	'>'            shift, and enter state 72
	'>='           shift, and enter state 73
	'and'          shift, and enter state 74
	'bool'         reduce using rule 66
	'false'        reduce using rule 66
	'for'          reduce using rule 66
	'fun'          reduce using rule 66
	'if'           reduce using rule 66
	'int'          reduce using rule 66
	'lambda'       reduce using rule 66
	'list'         reduce using rule 66
	'not'          reduce using rule 66
	'or'           reduce using rule 66
	'print'        reduce using rule 66
	'printEndl'    reduce using rule 66
	'return'       reduce using rule 66
	'string'       reduce using rule 66
	'to'           reduce using rule 66
	'true'         reduce using rule 66
	'void'         reduce using rule 66
	'while'        reduce using rule 66
	'}'            reduce using rule 66
	L_Ident        reduce using rule 66
	L_integ        reduce using rule 66
	L_quoted       reduce using rule 66
	%eof           reduce using rule 66

	RelOp          goto state 67

State 13

	Expr2 -> Expr3 .                                    (rule 68)
	Expr3 -> Expr3 . AddOp Expr4                        (rule 69)

	'!='           reduce using rule 68
	'('            reduce using rule 68
	')'            reduce using rule 68
	'+'            shift, and enter state 65
	','            reduce using rule 68
	'-'            shift, and enter state 66
			(reduce using rule 68)

	';'            reduce using rule 68
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'and'          reduce using rule 68
	'bool'         reduce using rule 68
	'false'        reduce using rule 68
	'for'          reduce using rule 68
	'fun'          reduce using rule 68
	'if'           reduce using rule 68
	'int'          reduce using rule 68
	'lambda'       reduce using rule 68
	'list'         reduce using rule 68
	'not'          reduce using rule 68
	'or'           reduce using rule 68
	'print'        reduce using rule 68
	'printEndl'    reduce using rule 68
	'return'       reduce using rule 68
	'string'       reduce using rule 68
	'to'           reduce using rule 68
	'true'         reduce using rule 68
	'void'         reduce using rule 68
	'while'        reduce using rule 68
	'}'            reduce using rule 68
	L_Ident        reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68
	%eof           reduce using rule 68

	AddOp          goto state 64

State 14

	Expr3 -> Expr4 .                                    (rule 70)
	Expr4 -> Expr4 . MulOp Expr5                        (rule 71)

	'!='           reduce using rule 70
	'%'            shift, and enter state 61
	'('            reduce using rule 70
	')'            reduce using rule 70
	'*'            shift, and enter state 62
	'+'            reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'/'            shift, and enter state 63
	';'            reduce using rule 70
	'<'            reduce using rule 70
	'<='           reduce using rule 70
	'=='           reduce using rule 70
	'>'            reduce using rule 70
	'>='           reduce using rule 70
	'and'          reduce using rule 70
	'bool'         reduce using rule 70
	'false'        reduce using rule 70
	'for'          reduce using rule 70
	'fun'          reduce using rule 70
	'if'           reduce using rule 70
	'int'          reduce using rule 70
	'lambda'       reduce using rule 70
	'list'         reduce using rule 70
	'not'          reduce using rule 70
	'or'           reduce using rule 70
	'print'        reduce using rule 70
	'printEndl'    reduce using rule 70
	'return'       reduce using rule 70
	'string'       reduce using rule 70
	'to'           reduce using rule 70
	'true'         reduce using rule 70
	'void'         reduce using rule 70
	'while'        reduce using rule 70
	'}'            reduce using rule 70
	L_Ident        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70
	%eof           reduce using rule 70

	MulOp          goto state 60

State 15

	Expr4 -> Expr5 .                                    (rule 72)

	'!='           reduce using rule 72
	'%'            reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	'+'            reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'/'            reduce using rule 72
	';'            reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'and'          reduce using rule 72
	'bool'         reduce using rule 72
	'false'        reduce using rule 72
	'for'          reduce using rule 72
	'fun'          reduce using rule 72
	'if'           reduce using rule 72
	'int'          reduce using rule 72
	'lambda'       reduce using rule 72
	'list'         reduce using rule 72
	'not'          reduce using rule 72
	'or'           reduce using rule 72
	'print'        reduce using rule 72
	'printEndl'    reduce using rule 72
	'return'       reduce using rule 72
	'string'       reduce using rule 72
	'to'           reduce using rule 72
	'true'         reduce using rule 72
	'void'         reduce using rule 72
	'while'        reduce using rule 72
	'}'            reduce using rule 72
	L_Ident        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72
	%eof           reduce using rule 72


State 16

	Expr5 -> Expr6 .                                    (rule 75)
	Expr5 -> Expr6 . '.' 'len()'                        (rule 76)
	Expr5 -> Expr6 . '.' 'at' '(' Expr6 ')'             (rule 77)
	Expr6 -> Expr6 . '(' ListExprOrRef ')'              (rule 78)

	'!='           reduce using rule 75
	'%'            reduce using rule 75
	'('            shift, and enter state 58
			(reduce using rule 75)

	')'            reduce using rule 75
	'*'            reduce using rule 75
	'+'            reduce using rule 75
	','            reduce using rule 75
	'-'            reduce using rule 75
	'.'            shift, and enter state 59
	'/'            reduce using rule 75
	';'            reduce using rule 75
	'<'            reduce using rule 75
	'<='           reduce using rule 75
	'=='           reduce using rule 75
	'>'            reduce using rule 75
	'>='           reduce using rule 75
	'and'          reduce using rule 75
	'bool'         reduce using rule 75
	'false'        reduce using rule 75
	'for'          reduce using rule 75
	'fun'          reduce using rule 75
	'if'           reduce using rule 75
	'int'          reduce using rule 75
	'lambda'       reduce using rule 75
	'list'         reduce using rule 75
	'not'          reduce using rule 75
	'or'           reduce using rule 75
	'print'        reduce using rule 75
	'printEndl'    reduce using rule 75
	'return'       reduce using rule 75
	'string'       reduce using rule 75
	'to'           reduce using rule 75
	'true'         reduce using rule 75
	'void'         reduce using rule 75
	'while'        reduce using rule 75
	'}'            reduce using rule 75
	L_Ident        reduce using rule 75
	L_integ        reduce using rule 75
	L_quoted       reduce using rule 75
	%eof           reduce using rule 75


State 17

	Expr6 -> Expr7 .                                    (rule 79)

	'!='           reduce using rule 79
	'%'            reduce using rule 79
	'('            reduce using rule 79
	')'            reduce using rule 79
	'*'            reduce using rule 79
	'+'            reduce using rule 79
	','            reduce using rule 79
	'-'            reduce using rule 79
	'.'            reduce using rule 79
	'/'            reduce using rule 79
	';'            reduce using rule 79
	'<'            reduce using rule 79
	'<='           reduce using rule 79
	'=='           reduce using rule 79
	'>'            reduce using rule 79
	'>='           reduce using rule 79
	'and'          reduce using rule 79
	'bool'         reduce using rule 79
	'false'        reduce using rule 79
	'for'          reduce using rule 79
	'fun'          reduce using rule 79
	'if'           reduce using rule 79
	'int'          reduce using rule 79
	'lambda'       reduce using rule 79
	'list'         reduce using rule 79
	'not'          reduce using rule 79
	'or'           reduce using rule 79
	'print'        reduce using rule 79
	'printEndl'    reduce using rule 79
	'return'       reduce using rule 79
	'string'       reduce using rule 79
	'to'           reduce using rule 79
	'true'         reduce using rule 79
	'void'         reduce using rule 79
	'while'        reduce using rule 79
	'}'            reduce using rule 79
	L_Ident        reduce using rule 79
	L_integ        reduce using rule 79
	L_quoted       reduce using rule 79
	%eof           reduce using rule 79


State 18

	Expr7 -> '(' . ListArg ')' '->' Type Block          (rule 86)
	Expr7 -> '(' . Expr ')'                             (rule 87)

	'&'            shift, and enter state 57
	'('            shift, and enter state 18
	')'            reduce using rule 35
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Arg            goto state 52
	ListArg        goto state 53
	Type           goto state 54
	TypeOrRef      goto state 55
	Expr           goto state 56
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 19

	Expr5 -> '-' . Expr6                                (rule 73)

	'('            shift, and enter state 18
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr6          goto state 51
	Expr7          goto state 17

State 20

	Type -> 'bool' .                                    (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'>'            reduce using rule 39
	'[]'           reduce using rule 39
	'{'            reduce using rule 39
	L_Ident        reduce using rule 39


State 21

	Expr7 -> 'false' .                                  (rule 83)

	'!='           reduce using rule 83
	'%'            reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	'*'            reduce using rule 83
	'+'            reduce using rule 83
	','            reduce using rule 83
	'-'            reduce using rule 83
	'.'            reduce using rule 83
	'/'            reduce using rule 83
	';'            reduce using rule 83
	'<'            reduce using rule 83
	'<='           reduce using rule 83
	'=='           reduce using rule 83
	'>'            reduce using rule 83
	'>='           reduce using rule 83
	'and'          reduce using rule 83
	'bool'         reduce using rule 83
	'false'        reduce using rule 83
	'for'          reduce using rule 83
	'fun'          reduce using rule 83
	'if'           reduce using rule 83
	'int'          reduce using rule 83
	'lambda'       reduce using rule 83
	'list'         reduce using rule 83
	'not'          reduce using rule 83
	'or'           reduce using rule 83
	'print'        reduce using rule 83
	'printEndl'    reduce using rule 83
	'return'       reduce using rule 83
	'string'       reduce using rule 83
	'to'           reduce using rule 83
	'true'         reduce using rule 83
	'void'         reduce using rule 83
	'while'        reduce using rule 83
	'}'            reduce using rule 83
	L_Ident        reduce using rule 83
	L_integ        reduce using rule 83
	L_quoted       reduce using rule 83
	%eof           reduce using rule 83


State 22

	Stmt -> 'for' . '(' Ident 'from' Expr 'to' Expr ')' Block    (rule 16)

	'('            shift, and enter state 50


State 23

	Stmt -> 'fun' . Ident '(' ListArg ')' '->' Type Block    (rule 22)

	L_Ident        shift, and enter state 2

	Ident          goto state 49

State 24

	Stmt -> 'if' . '(' Expr ')' Block                   (rule 13)
	Stmt -> 'if' . '(' Expr ')' Block 'else' Block      (rule 14)

	'('            shift, and enter state 48


State 25

	Type -> 'int' .                                     (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	'>'            reduce using rule 38
	'[]'           reduce using rule 38
	'{'            reduce using rule 38
	L_Ident        reduce using rule 38


State 26

	Type -> 'lambda' . '<' '(' ListTypeOrRef ')' '->' Type '>'    (rule 43)

	'<'            shift, and enter state 47


State 27

	Type -> 'list' . '<' Type '>'                       (rule 42)

	'<'            shift, and enter state 46


State 28

	Expr5 -> 'not' . Expr6                              (rule 74)

	'('            shift, and enter state 18
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr6          goto state 45
	Expr7          goto state 17

State 29

	Stmt -> 'print' . '(' ListExpr ')' ';'              (rule 17)

	'('            shift, and enter state 44


State 30

	Stmt -> 'printEndl' . '(' ListExpr ')' ';'          (rule 18)

	'('            shift, and enter state 43


State 31

	Stmt -> 'return' . Expr ';'                         (rule 19)
	Stmt -> 'return' . ';'                              (rule 20)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	';'            shift, and enter state 42
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 41
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 32

	Type -> 'string' .                                  (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'>'            reduce using rule 40
	'[]'           reduce using rule 40
	'{'            reduce using rule 40
	L_Ident        reduce using rule 40


State 33

	Expr7 -> 'true' .                                   (rule 82)

	'!='           reduce using rule 82
	'%'            reduce using rule 82
	'('            reduce using rule 82
	')'            reduce using rule 82
	'*'            reduce using rule 82
	'+'            reduce using rule 82
	','            reduce using rule 82
	'-'            reduce using rule 82
	'.'            reduce using rule 82
	'/'            reduce using rule 82
	';'            reduce using rule 82
	'<'            reduce using rule 82
	'<='           reduce using rule 82
	'=='           reduce using rule 82
	'>'            reduce using rule 82
	'>='           reduce using rule 82
	'and'          reduce using rule 82
	'bool'         reduce using rule 82
	'false'        reduce using rule 82
	'for'          reduce using rule 82
	'fun'          reduce using rule 82
	'if'           reduce using rule 82
	'int'          reduce using rule 82
	'lambda'       reduce using rule 82
	'list'         reduce using rule 82
	'not'          reduce using rule 82
	'or'           reduce using rule 82
	'print'        reduce using rule 82
	'printEndl'    reduce using rule 82
	'return'       reduce using rule 82
	'string'       reduce using rule 82
	'to'           reduce using rule 82
	'true'         reduce using rule 82
	'void'         reduce using rule 82
	'while'        reduce using rule 82
	'}'            reduce using rule 82
	L_Ident        reduce using rule 82
	L_integ        reduce using rule 82
	L_quoted       reduce using rule 82
	%eof           reduce using rule 82


State 34

	Type -> 'void' .                                    (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'>'            reduce using rule 41
	'[]'           reduce using rule 41
	'{'            reduce using rule 41
	L_Ident        reduce using rule 41


State 35

	Stmt -> 'while' . '(' Expr ')' Block                (rule 15)

	'('            shift, and enter state 38


State 36

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'and'          reduce using rule 2
	'bool'         reduce using rule 2
	'false'        reduce using rule 2
	'for'          reduce using rule 2
	'fun'          reduce using rule 2
	'if'           reduce using rule 2
	'int'          reduce using rule 2
	'lambda'       reduce using rule 2
	'list'         reduce using rule 2
	'not'          reduce using rule 2
	'or'           reduce using rule 2
	'print'        reduce using rule 2
	'printEndl'    reduce using rule 2
	'return'       reduce using rule 2
	'string'       reduce using rule 2
	'to'           reduce using rule 2
	'true'         reduce using rule 2
	'void'         reduce using rule 2
	'while'        reduce using rule 2
	'}'            reduce using rule 2
	L_Ident        reduce using rule 2
	L_integ        reduce using rule 2
	L_quoted       reduce using rule 2
	%eof           reduce using rule 2


State 37

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'.'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'and'          reduce using rule 3
	'bool'         reduce using rule 3
	'false'        reduce using rule 3
	'for'          reduce using rule 3
	'fun'          reduce using rule 3
	'if'           reduce using rule 3
	'int'          reduce using rule 3
	'lambda'       reduce using rule 3
	'list'         reduce using rule 3
	'not'          reduce using rule 3
	'or'           reduce using rule 3
	'print'        reduce using rule 3
	'printEndl'    reduce using rule 3
	'return'       reduce using rule 3
	'string'       reduce using rule 3
	'to'           reduce using rule 3
	'true'         reduce using rule 3
	'void'         reduce using rule 3
	'while'        reduce using rule 3
	'}'            reduce using rule 3
	L_Ident        reduce using rule 3
	L_integ        reduce using rule 3
	L_quoted       reduce using rule 3
	%eof           reduce using rule 3


State 38

	Stmt -> 'while' '(' . Expr ')' Block                (rule 15)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 113
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 39

	Expr7 -> Ident .                                    (rule 81)

	'!='           reduce using rule 81
	'%'            reduce using rule 81
	'('            reduce using rule 81
	')'            reduce using rule 81
	'*'            reduce using rule 81
	'+'            reduce using rule 81
	','            reduce using rule 81
	'-'            reduce using rule 81
	'.'            reduce using rule 81
	'/'            reduce using rule 81
	';'            reduce using rule 81
	'<'            reduce using rule 81
	'<='           reduce using rule 81
	'=='           reduce using rule 81
	'>'            reduce using rule 81
	'>='           reduce using rule 81
	'and'          reduce using rule 81
	'bool'         reduce using rule 81
	'false'        reduce using rule 81
	'for'          reduce using rule 81
	'fun'          reduce using rule 81
	'if'           reduce using rule 81
	'int'          reduce using rule 81
	'lambda'       reduce using rule 81
	'list'         reduce using rule 81
	'not'          reduce using rule 81
	'or'           reduce using rule 81
	'print'        reduce using rule 81
	'printEndl'    reduce using rule 81
	'return'       reduce using rule 81
	'string'       reduce using rule 81
	'to'           reduce using rule 81
	'true'         reduce using rule 81
	'void'         reduce using rule 81
	'while'        reduce using rule 81
	'}'            reduce using rule 81
	L_Ident        reduce using rule 81
	L_integ        reduce using rule 81
	L_quoted       reduce using rule 81
	%eof           reduce using rule 81


State 40

	Expr7 -> Type . '[]'                                (rule 84)

	'[]'           shift, and enter state 79


State 41

	Stmt -> 'return' Expr . ';'                         (rule 19)

	';'            shift, and enter state 112


State 42

	Stmt -> 'return' ';' .                              (rule 20)

	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'bool'         reduce using rule 20
	'false'        reduce using rule 20
	'for'          reduce using rule 20
	'fun'          reduce using rule 20
	'if'           reduce using rule 20
	'int'          reduce using rule 20
	'lambda'       reduce using rule 20
	'list'         reduce using rule 20
	'not'          reduce using rule 20
	'print'        reduce using rule 20
	'printEndl'    reduce using rule 20
	'return'       reduce using rule 20
	'string'       reduce using rule 20
	'true'         reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20
	%eof           reduce using rule 20


State 43

	Stmt -> 'printEndl' '(' . ListExpr ')' ';'          (rule 18)

	'('            shift, and enter state 18
	')'            reduce using rule 31
			(reduce using rule 28)

	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	ListExpr       goto state 111
	Type           goto state 40
	Expr           goto state 110
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 44

	Stmt -> 'print' '(' . ListExpr ')' ';'              (rule 17)

	'('            shift, and enter state 18
	')'            reduce using rule 31
			(reduce using rule 28)

	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	ListExpr       goto state 109
	Type           goto state 40
	Expr           goto state 110
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 45

	Expr5 -> 'not' Expr6 .                              (rule 74)
	Expr6 -> Expr6 . '(' ListExprOrRef ')'              (rule 78)

	'!='           reduce using rule 74
	'%'            reduce using rule 74
	'('            shift, and enter state 58
			(reduce using rule 74)

	')'            reduce using rule 74
	'*'            reduce using rule 74
	'+'            reduce using rule 74
	','            reduce using rule 74
	'-'            reduce using rule 74
	'/'            reduce using rule 74
	';'            reduce using rule 74
	'<'            reduce using rule 74
	'<='           reduce using rule 74
	'=='           reduce using rule 74
	'>'            reduce using rule 74
	'>='           reduce using rule 74
	'and'          reduce using rule 74
	'bool'         reduce using rule 74
	'false'        reduce using rule 74
	'for'          reduce using rule 74
	'fun'          reduce using rule 74
	'if'           reduce using rule 74
	'int'          reduce using rule 74
	'lambda'       reduce using rule 74
	'list'         reduce using rule 74
	'not'          reduce using rule 74
	'or'           reduce using rule 74
	'print'        reduce using rule 74
	'printEndl'    reduce using rule 74
	'return'       reduce using rule 74
	'string'       reduce using rule 74
	'to'           reduce using rule 74
	'true'         reduce using rule 74
	'void'         reduce using rule 74
	'while'        reduce using rule 74
	'}'            reduce using rule 74
	L_Ident        reduce using rule 74
	L_integ        reduce using rule 74
	L_quoted       reduce using rule 74
	%eof           reduce using rule 74


State 46

	Type -> 'list' '<' . Type '>'                       (rule 42)

	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 108

State 47

	Type -> 'lambda' '<' . '(' ListTypeOrRef ')' '->' Type '>'    (rule 43)

	'('            shift, and enter state 107


State 48

	Stmt -> 'if' '(' . Expr ')' Block                   (rule 13)
	Stmt -> 'if' '(' . Expr ')' Block 'else' Block      (rule 14)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 106
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 49

	Stmt -> 'fun' Ident . '(' ListArg ')' '->' Type Block    (rule 22)

	'('            shift, and enter state 105


State 50

	Stmt -> 'for' '(' . Ident 'from' Expr 'to' Expr ')' Block    (rule 16)

	L_Ident        shift, and enter state 2

	Ident          goto state 104

State 51

	Expr5 -> '-' Expr6 .                                (rule 73)
	Expr6 -> Expr6 . '(' ListExprOrRef ')'              (rule 78)

	'!='           reduce using rule 73
	'%'            reduce using rule 73
	'('            shift, and enter state 58
			(reduce using rule 73)

	')'            reduce using rule 73
	'*'            reduce using rule 73
	'+'            reduce using rule 73
	','            reduce using rule 73
	'-'            reduce using rule 73
	'/'            reduce using rule 73
	';'            reduce using rule 73
	'<'            reduce using rule 73
	'<='           reduce using rule 73
	'=='           reduce using rule 73
	'>'            reduce using rule 73
	'>='           reduce using rule 73
	'and'          reduce using rule 73
	'bool'         reduce using rule 73
	'false'        reduce using rule 73
	'for'          reduce using rule 73
	'fun'          reduce using rule 73
	'if'           reduce using rule 73
	'int'          reduce using rule 73
	'lambda'       reduce using rule 73
	'list'         reduce using rule 73
	'not'          reduce using rule 73
	'or'           reduce using rule 73
	'print'        reduce using rule 73
	'printEndl'    reduce using rule 73
	'return'       reduce using rule 73
	'string'       reduce using rule 73
	'to'           reduce using rule 73
	'true'         reduce using rule 73
	'void'         reduce using rule 73
	'while'        reduce using rule 73
	'}'            reduce using rule 73
	L_Ident        reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73
	%eof           reduce using rule 73


State 52

	ListArg -> Arg .                                    (rule 36)
	ListArg -> Arg . ',' ListArg                        (rule 37)

	')'            reduce using rule 36
	','            shift, and enter state 103


State 53

	Expr7 -> '(' ListArg . ')' '->' Type Block          (rule 86)

	')'            shift, and enter state 102


State 54

	TypeOrRef -> Type .                                 (rule 47)
	Expr7 -> Type . '[]'                                (rule 84)

	'[]'           shift, and enter state 79
	L_Ident        reduce using rule 47


State 55

	Arg -> TypeOrRef . Ident                            (rule 34)

	L_Ident        shift, and enter state 2

	Ident          goto state 101

State 56

	Expr7 -> '(' Expr . ')'                             (rule 87)

	')'            shift, and enter state 100


State 57

	TypeOrRef -> '&' . Type                             (rule 48)

	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 99

State 58

	Expr6 -> Expr6 '(' . ListExprOrRef ')'              (rule 78)

	'&'            shift, and enter state 98
	'('            shift, and enter state 18
	')'            reduce using rule 93
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 95
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17
	ExprOrRef      goto state 96
	ListExprOrRef  goto state 97

State 59

	Expr5 -> Expr6 '.' . 'len()'                        (rule 76)
	Expr5 -> Expr6 '.' . 'at' '(' Expr6 ')'             (rule 77)

	'at'           shift, and enter state 93
	'len()'        shift, and enter state 94


State 60

	Expr4 -> Expr4 MulOp . Expr5                        (rule 71)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr5          goto state 92
	Expr6          goto state 16
	Expr7          goto state 17

State 61

	MulOp -> '%' .                                      (rule 56)

	'('            reduce using rule 56
	'-'            reduce using rule 56
	'bool'         reduce using rule 56
	'false'        reduce using rule 56
	'int'          reduce using rule 56
	'lambda'       reduce using rule 56
	'list'         reduce using rule 56
	'not'          reduce using rule 56
	'string'       reduce using rule 56
	'true'         reduce using rule 56
	'void'         reduce using rule 56
	L_Ident        reduce using rule 56
	L_integ        reduce using rule 56
	L_quoted       reduce using rule 56


State 62

	MulOp -> '*' .                                      (rule 54)

	'('            reduce using rule 54
	'-'            reduce using rule 54
	'bool'         reduce using rule 54
	'false'        reduce using rule 54
	'int'          reduce using rule 54
	'lambda'       reduce using rule 54
	'list'         reduce using rule 54
	'not'          reduce using rule 54
	'string'       reduce using rule 54
	'true'         reduce using rule 54
	'void'         reduce using rule 54
	L_Ident        reduce using rule 54
	L_integ        reduce using rule 54
	L_quoted       reduce using rule 54


State 63

	MulOp -> '/' .                                      (rule 55)

	'('            reduce using rule 55
	'-'            reduce using rule 55
	'bool'         reduce using rule 55
	'false'        reduce using rule 55
	'int'          reduce using rule 55
	'lambda'       reduce using rule 55
	'list'         reduce using rule 55
	'not'          reduce using rule 55
	'string'       reduce using rule 55
	'true'         reduce using rule 55
	'void'         reduce using rule 55
	L_Ident        reduce using rule 55
	L_integ        reduce using rule 55
	L_quoted       reduce using rule 55


State 64

	Expr3 -> Expr3 AddOp . Expr4                        (rule 69)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr4          goto state 91
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 65

	AddOp -> '+' .                                      (rule 52)

	'('            reduce using rule 52
	'-'            reduce using rule 52
	'bool'         reduce using rule 52
	'false'        reduce using rule 52
	'int'          reduce using rule 52
	'lambda'       reduce using rule 52
	'list'         reduce using rule 52
	'not'          reduce using rule 52
	'string'       reduce using rule 52
	'true'         reduce using rule 52
	'void'         reduce using rule 52
	L_Ident        reduce using rule 52
	L_integ        reduce using rule 52
	L_quoted       reduce using rule 52


State 66

	AddOp -> '-' .                                      (rule 53)

	'('            reduce using rule 53
	'-'            reduce using rule 53
	'bool'         reduce using rule 53
	'false'        reduce using rule 53
	'int'          reduce using rule 53
	'lambda'       reduce using rule 53
	'list'         reduce using rule 53
	'not'          reduce using rule 53
	'string'       reduce using rule 53
	'true'         reduce using rule 53
	'void'         reduce using rule 53
	L_Ident        reduce using rule 53
	L_integ        reduce using rule 53
	L_quoted       reduce using rule 53


State 67

	Expr2 -> Expr2 RelOp . Expr3                        (rule 67)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr3          goto state 90
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 68

	RelOp -> '!=' .                                     (rule 62)

	'('            reduce using rule 62
	'-'            reduce using rule 62
	'bool'         reduce using rule 62
	'false'        reduce using rule 62
	'int'          reduce using rule 62
	'lambda'       reduce using rule 62
	'list'         reduce using rule 62
	'not'          reduce using rule 62
	'string'       reduce using rule 62
	'true'         reduce using rule 62
	'void'         reduce using rule 62
	L_Ident        reduce using rule 62
	L_integ        reduce using rule 62
	L_quoted       reduce using rule 62


State 69

	RelOp -> '<' .                                      (rule 57)

	'('            reduce using rule 57
	'-'            reduce using rule 57
	'bool'         reduce using rule 57
	'false'        reduce using rule 57
	'int'          reduce using rule 57
	'lambda'       reduce using rule 57
	'list'         reduce using rule 57
	'not'          reduce using rule 57
	'string'       reduce using rule 57
	'true'         reduce using rule 57
	'void'         reduce using rule 57
	L_Ident        reduce using rule 57
	L_integ        reduce using rule 57
	L_quoted       reduce using rule 57


State 70

	RelOp -> '<=' .                                     (rule 58)

	'('            reduce using rule 58
	'-'            reduce using rule 58
	'bool'         reduce using rule 58
	'false'        reduce using rule 58
	'int'          reduce using rule 58
	'lambda'       reduce using rule 58
	'list'         reduce using rule 58
	'not'          reduce using rule 58
	'string'       reduce using rule 58
	'true'         reduce using rule 58
	'void'         reduce using rule 58
	L_Ident        reduce using rule 58
	L_integ        reduce using rule 58
	L_quoted       reduce using rule 58


State 71

	RelOp -> '==' .                                     (rule 61)

	'('            reduce using rule 61
	'-'            reduce using rule 61
	'bool'         reduce using rule 61
	'false'        reduce using rule 61
	'int'          reduce using rule 61
	'lambda'       reduce using rule 61
	'list'         reduce using rule 61
	'not'          reduce using rule 61
	'string'       reduce using rule 61
	'true'         reduce using rule 61
	'void'         reduce using rule 61
	L_Ident        reduce using rule 61
	L_integ        reduce using rule 61
	L_quoted       reduce using rule 61


State 72

	RelOp -> '>' .                                      (rule 59)

	'('            reduce using rule 59
	'-'            reduce using rule 59
	'bool'         reduce using rule 59
	'false'        reduce using rule 59
	'int'          reduce using rule 59
	'lambda'       reduce using rule 59
	'list'         reduce using rule 59
	'not'          reduce using rule 59
	'string'       reduce using rule 59
	'true'         reduce using rule 59
	'void'         reduce using rule 59
	L_Ident        reduce using rule 59
	L_integ        reduce using rule 59
	L_quoted       reduce using rule 59


State 73

	RelOp -> '>=' .                                     (rule 60)

	'('            reduce using rule 60
	'-'            reduce using rule 60
	'bool'         reduce using rule 60
	'false'        reduce using rule 60
	'int'          reduce using rule 60
	'lambda'       reduce using rule 60
	'list'         reduce using rule 60
	'not'          reduce using rule 60
	'string'       reduce using rule 60
	'true'         reduce using rule 60
	'void'         reduce using rule 60
	L_Ident        reduce using rule 60
	L_integ        reduce using rule 60
	L_quoted       reduce using rule 60


State 74

	Expr1 -> Expr2 'and' . Expr1                        (rule 65)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr1          goto state 89
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 75

	Expr -> Expr1 'or' . Expr                           (rule 63)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 88
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 76

	Stmt -> Expr ';' .                                  (rule 12)

	'('            reduce using rule 12
	'-'            reduce using rule 12
	';'            reduce using rule 12
	'bool'         reduce using rule 12
	'false'        reduce using rule 12
	'for'          reduce using rule 12
	'fun'          reduce using rule 12
	'if'           reduce using rule 12
	'int'          reduce using rule 12
	'lambda'       reduce using rule 12
	'list'         reduce using rule 12
	'not'          reduce using rule 12
	'print'        reduce using rule 12
	'printEndl'    reduce using rule 12
	'return'       reduce using rule 12
	'string'       reduce using rule 12
	'true'         reduce using rule 12
	'void'         reduce using rule 12
	'while'        reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	L_integ        reduce using rule 12
	L_quoted       reduce using rule 12
	%eof           reduce using rule 12


State 77

	Item -> Ident .                                     (rule 24)
	Item -> Ident . '=' Expr                            (rule 25)

	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'='            shift, and enter state 87
	'bool'         reduce using rule 24
	'false'        reduce using rule 24
	'for'          reduce using rule 24
	'fun'          reduce using rule 24
	'if'           reduce using rule 24
	'int'          reduce using rule 24
	'lambda'       reduce using rule 24
	'list'         reduce using rule 24
	'not'          reduce using rule 24
	'print'        reduce using rule 24
	'printEndl'    reduce using rule 24
	'return'       reduce using rule 24
	'string'       reduce using rule 24
	'true'         reduce using rule 24
	'void'         reduce using rule 24
	'while'        reduce using rule 24
	'}'            reduce using rule 24
	L_Ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24
	%eof           reduce using rule 24


State 78

	Stmt -> Type Item .                                 (rule 11)

	'('            reduce using rule 11
	'-'            reduce using rule 11
	';'            reduce using rule 11
	'bool'         reduce using rule 11
	'false'        reduce using rule 11
	'for'          reduce using rule 11
	'fun'          reduce using rule 11
	'if'           reduce using rule 11
	'int'          reduce using rule 11
	'lambda'       reduce using rule 11
	'list'         reduce using rule 11
	'not'          reduce using rule 11
	'print'        reduce using rule 11
	'printEndl'    reduce using rule 11
	'return'       reduce using rule 11
	'string'       reduce using rule 11
	'true'         reduce using rule 11
	'void'         reduce using rule 11
	'while'        reduce using rule 11
	'}'            reduce using rule 11
	L_Ident        reduce using rule 11
	L_integ        reduce using rule 11
	L_quoted       reduce using rule 11
	%eof           reduce using rule 11


State 79

	Expr7 -> Type '[]' .                                (rule 84)

	'!='           reduce using rule 84
	'%'            reduce using rule 84
	'('            reduce using rule 84
	')'            reduce using rule 84
	'*'            reduce using rule 84
	'+'            reduce using rule 84
	','            reduce using rule 84
	'-'            reduce using rule 84
	'.'            reduce using rule 84
	'/'            reduce using rule 84
	';'            reduce using rule 84
	'<'            reduce using rule 84
	'<='           reduce using rule 84
	'=='           reduce using rule 84
	'>'            reduce using rule 84
	'>='           reduce using rule 84
	'and'          reduce using rule 84
	'bool'         reduce using rule 84
	'false'        reduce using rule 84
	'for'          reduce using rule 84
	'fun'          reduce using rule 84
	'if'           reduce using rule 84
	'int'          reduce using rule 84
	'lambda'       reduce using rule 84
	'list'         reduce using rule 84
	'not'          reduce using rule 84
	'or'           reduce using rule 84
	'print'        reduce using rule 84
	'printEndl'    reduce using rule 84
	'return'       reduce using rule 84
	'string'       reduce using rule 84
	'to'           reduce using rule 84
	'true'         reduce using rule 84
	'void'         reduce using rule 84
	'while'        reduce using rule 84
	'}'            reduce using rule 84
	L_Ident        reduce using rule 84
	L_integ        reduce using rule 84
	L_quoted       reduce using rule 84
	%eof           reduce using rule 84


State 80

	ListStmt -> Stmt ListStmt .                         (rule 7)

	'}'            reduce using rule 7
	%eof           reduce using rule 7


State 81

	ListStmt -> Stmt ';' . ListStmt                     (rule 10)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'for'          shift, and enter state 22
	'fun'          shift, and enter state 23
	'if'           shift, and enter state 24
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'print'        shift, and enter state 29
	'printEndl'    shift, and enter state 30
	'return'       shift, and enter state 31
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	'while'        shift, and enter state 35
	'}'            reduce using rule 8
			(reduce using rule 6)

	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37
	%eof           reduce using rule 8
			(reduce using rule 6)


	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	ListStmt       goto state 86
	Stmt           goto state 8
	Type           goto state 9
	Expr           goto state 10
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 82

	Stmt -> Ident '.' . 'push' '(' Expr ')'             (rule 23)

	'push'         shift, and enter state 85


State 83

	Stmt -> Ident '=' . Expr ';'                        (rule 21)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 84
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 84

	Stmt -> Ident '=' Expr . ';'                        (rule 21)

	';'            shift, and enter state 133


State 85

	Stmt -> Ident '.' 'push' . '(' Expr ')'             (rule 23)

	'('            shift, and enter state 132


State 86

	ListStmt -> Stmt ';' ListStmt .                     (rule 10)

	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 87

	Item -> Ident '=' . Expr                            (rule 25)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 131
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 88

	Expr -> Expr1 'or' Expr .                           (rule 63)

	'('            reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	';'            reduce using rule 63
	'bool'         reduce using rule 63
	'false'        reduce using rule 63
	'for'          reduce using rule 63
	'fun'          reduce using rule 63
	'if'           reduce using rule 63
	'int'          reduce using rule 63
	'lambda'       reduce using rule 63
	'list'         reduce using rule 63
	'not'          reduce using rule 63
	'print'        reduce using rule 63
	'printEndl'    reduce using rule 63
	'return'       reduce using rule 63
	'string'       reduce using rule 63
	'to'           reduce using rule 63
	'true'         reduce using rule 63
	'void'         reduce using rule 63
	'while'        reduce using rule 63
	'}'            reduce using rule 63
	L_Ident        reduce using rule 63
	L_integ        reduce using rule 63
	L_quoted       reduce using rule 63
	%eof           reduce using rule 63


State 89

	Expr1 -> Expr2 'and' Expr1 .                        (rule 65)

	'('            reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	';'            reduce using rule 65
	'bool'         reduce using rule 65
	'false'        reduce using rule 65
	'for'          reduce using rule 65
	'fun'          reduce using rule 65
	'if'           reduce using rule 65
	'int'          reduce using rule 65
	'lambda'       reduce using rule 65
	'list'         reduce using rule 65
	'not'          reduce using rule 65
	'or'           reduce using rule 65
	'print'        reduce using rule 65
	'printEndl'    reduce using rule 65
	'return'       reduce using rule 65
	'string'       reduce using rule 65
	'to'           reduce using rule 65
	'true'         reduce using rule 65
	'void'         reduce using rule 65
	'while'        reduce using rule 65
	'}'            reduce using rule 65
	L_Ident        reduce using rule 65
	L_integ        reduce using rule 65
	L_quoted       reduce using rule 65
	%eof           reduce using rule 65


State 90

	Expr2 -> Expr2 RelOp Expr3 .                        (rule 67)
	Expr3 -> Expr3 . AddOp Expr4                        (rule 69)

	'!='           reduce using rule 67
	'('            reduce using rule 67
	')'            reduce using rule 67
	'+'            shift, and enter state 65
	','            reduce using rule 67
	'-'            shift, and enter state 66
			(reduce using rule 67)

	';'            reduce using rule 67
	'<'            reduce using rule 67
	'<='           reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'and'          reduce using rule 67
	'bool'         reduce using rule 67
	'false'        reduce using rule 67
	'for'          reduce using rule 67
	'fun'          reduce using rule 67
	'if'           reduce using rule 67
	'int'          reduce using rule 67
	'lambda'       reduce using rule 67
	'list'         reduce using rule 67
	'not'          reduce using rule 67
	'or'           reduce using rule 67
	'print'        reduce using rule 67
	'printEndl'    reduce using rule 67
	'return'       reduce using rule 67
	'string'       reduce using rule 67
	'to'           reduce using rule 67
	'true'         reduce using rule 67
	'void'         reduce using rule 67
	'while'        reduce using rule 67
	'}'            reduce using rule 67
	L_Ident        reduce using rule 67
	L_integ        reduce using rule 67
	L_quoted       reduce using rule 67
	%eof           reduce using rule 67

	AddOp          goto state 64

State 91

	Expr3 -> Expr3 AddOp Expr4 .                        (rule 69)
	Expr4 -> Expr4 . MulOp Expr5                        (rule 71)

	'!='           reduce using rule 69
	'%'            shift, and enter state 61
	'('            reduce using rule 69
	')'            reduce using rule 69
	'*'            shift, and enter state 62
	'+'            reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'/'            shift, and enter state 63
	';'            reduce using rule 69
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'and'          reduce using rule 69
	'bool'         reduce using rule 69
	'false'        reduce using rule 69
	'for'          reduce using rule 69
	'fun'          reduce using rule 69
	'if'           reduce using rule 69
	'int'          reduce using rule 69
	'lambda'       reduce using rule 69
	'list'         reduce using rule 69
	'not'          reduce using rule 69
	'or'           reduce using rule 69
	'print'        reduce using rule 69
	'printEndl'    reduce using rule 69
	'return'       reduce using rule 69
	'string'       reduce using rule 69
	'to'           reduce using rule 69
	'true'         reduce using rule 69
	'void'         reduce using rule 69
	'while'        reduce using rule 69
	'}'            reduce using rule 69
	L_Ident        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69
	%eof           reduce using rule 69

	MulOp          goto state 60

State 92

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 71)

	'!='           reduce using rule 71
	'%'            reduce using rule 71
	'('            reduce using rule 71
	')'            reduce using rule 71
	'*'            reduce using rule 71
	'+'            reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'/'            reduce using rule 71
	';'            reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	'and'          reduce using rule 71
	'bool'         reduce using rule 71
	'false'        reduce using rule 71
	'for'          reduce using rule 71
	'fun'          reduce using rule 71
	'if'           reduce using rule 71
	'int'          reduce using rule 71
	'lambda'       reduce using rule 71
	'list'         reduce using rule 71
	'not'          reduce using rule 71
	'or'           reduce using rule 71
	'print'        reduce using rule 71
	'printEndl'    reduce using rule 71
	'return'       reduce using rule 71
	'string'       reduce using rule 71
	'to'           reduce using rule 71
	'true'         reduce using rule 71
	'void'         reduce using rule 71
	'while'        reduce using rule 71
	'}'            reduce using rule 71
	L_Ident        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71
	%eof           reduce using rule 71


State 93

	Expr5 -> Expr6 '.' 'at' . '(' Expr6 ')'             (rule 77)

	'('            shift, and enter state 130


State 94

	Expr5 -> Expr6 '.' 'len()' .                        (rule 76)

	'!='           reduce using rule 76
	'%'            reduce using rule 76
	'('            reduce using rule 76
	')'            reduce using rule 76
	'*'            reduce using rule 76
	'+'            reduce using rule 76
	','            reduce using rule 76
	'-'            reduce using rule 76
	'/'            reduce using rule 76
	';'            reduce using rule 76
	'<'            reduce using rule 76
	'<='           reduce using rule 76
	'=='           reduce using rule 76
	'>'            reduce using rule 76
	'>='           reduce using rule 76
	'and'          reduce using rule 76
	'bool'         reduce using rule 76
	'false'        reduce using rule 76
	'for'          reduce using rule 76
	'fun'          reduce using rule 76
	'if'           reduce using rule 76
	'int'          reduce using rule 76
	'lambda'       reduce using rule 76
	'list'         reduce using rule 76
	'not'          reduce using rule 76
	'or'           reduce using rule 76
	'print'        reduce using rule 76
	'printEndl'    reduce using rule 76
	'return'       reduce using rule 76
	'string'       reduce using rule 76
	'to'           reduce using rule 76
	'true'         reduce using rule 76
	'void'         reduce using rule 76
	'while'        reduce using rule 76
	'}'            reduce using rule 76
	L_Ident        reduce using rule 76
	L_integ        reduce using rule 76
	L_quoted       reduce using rule 76
	%eof           reduce using rule 76


State 95

	ExprOrRef -> Expr .                                 (rule 91)

	')'            reduce using rule 91
	','            reduce using rule 91


State 96

	ListExprOrRef -> ExprOrRef .                        (rule 94)
	ListExprOrRef -> ExprOrRef . ',' ListExprOrRef      (rule 95)

	')'            reduce using rule 94
	','            shift, and enter state 129


State 97

	Expr6 -> Expr6 '(' ListExprOrRef . ')'              (rule 78)

	')'            shift, and enter state 128


State 98

	ExprOrRef -> '&' . Ident                            (rule 92)

	L_Ident        shift, and enter state 2

	Ident          goto state 127

State 99

	TypeOrRef -> '&' Type .                             (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	L_Ident        reduce using rule 48


State 100

	Expr7 -> '(' Expr ')' .                             (rule 87)

	'!='           reduce using rule 87
	'%'            reduce using rule 87
	'('            reduce using rule 87
	')'            reduce using rule 87
	'*'            reduce using rule 87
	'+'            reduce using rule 87
	','            reduce using rule 87
	'-'            reduce using rule 87
	'.'            reduce using rule 87
	'/'            reduce using rule 87
	';'            reduce using rule 87
	'<'            reduce using rule 87
	'<='           reduce using rule 87
	'=='           reduce using rule 87
	'>'            reduce using rule 87
	'>='           reduce using rule 87
	'and'          reduce using rule 87
	'bool'         reduce using rule 87
	'false'        reduce using rule 87
	'for'          reduce using rule 87
	'fun'          reduce using rule 87
	'if'           reduce using rule 87
	'int'          reduce using rule 87
	'lambda'       reduce using rule 87
	'list'         reduce using rule 87
	'not'          reduce using rule 87
	'or'           reduce using rule 87
	'print'        reduce using rule 87
	'printEndl'    reduce using rule 87
	'return'       reduce using rule 87
	'string'       reduce using rule 87
	'to'           reduce using rule 87
	'true'         reduce using rule 87
	'void'         reduce using rule 87
	'while'        reduce using rule 87
	'}'            reduce using rule 87
	L_Ident        reduce using rule 87
	L_integ        reduce using rule 87
	L_quoted       reduce using rule 87
	%eof           reduce using rule 87


State 101

	Arg -> TypeOrRef Ident .                            (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34


State 102

	Expr7 -> '(' ListArg ')' . '->' Type Block          (rule 86)

	'->'           shift, and enter state 126


State 103

	ListArg -> Arg ',' . ListArg                        (rule 37)

	'&'            shift, and enter state 57
	')'            reduce using rule 35
	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Arg            goto state 52
	ListArg        goto state 125
	Type           goto state 119
	TypeOrRef      goto state 55

State 104

	Stmt -> 'for' '(' Ident . 'from' Expr 'to' Expr ')' Block    (rule 16)

	'from'         shift, and enter state 124


State 105

	Stmt -> 'fun' Ident '(' . ListArg ')' '->' Type Block    (rule 22)

	'&'            shift, and enter state 57
	')'            reduce using rule 35
	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Arg            goto state 52
	ListArg        goto state 123
	Type           goto state 119
	TypeOrRef      goto state 55

State 106

	Stmt -> 'if' '(' Expr . ')' Block                   (rule 13)
	Stmt -> 'if' '(' Expr . ')' Block 'else' Block      (rule 14)

	')'            shift, and enter state 122


State 107

	Type -> 'lambda' '<' '(' . ListTypeOrRef ')' '->' Type '>'    (rule 43)

	'&'            shift, and enter state 57
	')'            reduce using rule 49
	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 119
	TypeOrRef      goto state 120
	ListTypeOrRef  goto state 121

State 108

	Type -> 'list' '<' Type . '>'                       (rule 42)

	'>'            shift, and enter state 118


State 109

	Stmt -> 'print' '(' ListExpr . ')' ';'              (rule 17)

	')'            shift, and enter state 117


State 110

	ListExpr -> Expr .                                  (rule 29)
	ListExpr -> Expr . ',' ListExpr                     (rule 30)
	ListExpr -> Expr .                                  (rule 32)
	ListExpr -> Expr . ',' ListExpr                     (rule 33)

	')'            reduce using rule 32
			(reduce using rule 29)

	','            shift, and enter state 116


State 111

	Stmt -> 'printEndl' '(' ListExpr . ')' ';'          (rule 18)

	')'            shift, and enter state 115


State 112

	Stmt -> 'return' Expr ';' .                         (rule 19)

	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'bool'         reduce using rule 19
	'false'        reduce using rule 19
	'for'          reduce using rule 19
	'fun'          reduce using rule 19
	'if'           reduce using rule 19
	'int'          reduce using rule 19
	'lambda'       reduce using rule 19
	'list'         reduce using rule 19
	'not'          reduce using rule 19
	'print'        reduce using rule 19
	'printEndl'    reduce using rule 19
	'return'       reduce using rule 19
	'string'       reduce using rule 19
	'true'         reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19
	%eof           reduce using rule 19


State 113

	Stmt -> 'while' '(' Expr . ')' Block                (rule 15)

	')'            shift, and enter state 114


State 114

	Stmt -> 'while' '(' Expr ')' . Block                (rule 15)

	'{'            shift, and enter state 141

	Block          goto state 147

State 115

	Stmt -> 'printEndl' '(' ListExpr ')' . ';'          (rule 18)

	';'            shift, and enter state 146


State 116

	ListExpr -> Expr ',' . ListExpr                     (rule 30)
	ListExpr -> Expr ',' . ListExpr                     (rule 33)

	'('            shift, and enter state 18
	')'            reduce using rule 31
			(reduce using rule 28)

	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	ListExpr       goto state 145
	Type           goto state 40
	Expr           goto state 110
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 117

	Stmt -> 'print' '(' ListExpr ')' . ';'              (rule 17)

	';'            shift, and enter state 144


State 118

	Type -> 'list' '<' Type '>' .                       (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'>'            reduce using rule 42
	'[]'           reduce using rule 42
	'{'            reduce using rule 42
	L_Ident        reduce using rule 42


State 119

	TypeOrRef -> Type .                                 (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	L_Ident        reduce using rule 47


State 120

	ListTypeOrRef -> TypeOrRef .                        (rule 50)
	ListTypeOrRef -> TypeOrRef . ',' ListTypeOrRef      (rule 51)

	')'            reduce using rule 50
	','            shift, and enter state 143


State 121

	Type -> 'lambda' '<' '(' ListTypeOrRef . ')' '->' Type '>'    (rule 43)

	')'            shift, and enter state 142


State 122

	Stmt -> 'if' '(' Expr ')' . Block                   (rule 13)
	Stmt -> 'if' '(' Expr ')' . Block 'else' Block      (rule 14)

	'{'            shift, and enter state 141

	Block          goto state 140

State 123

	Stmt -> 'fun' Ident '(' ListArg . ')' '->' Type Block    (rule 22)

	')'            shift, and enter state 139


State 124

	Stmt -> 'for' '(' Ident 'from' . Expr 'to' Expr ')' Block    (rule 16)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 138
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 125

	ListArg -> Arg ',' ListArg .                        (rule 37)

	')'            reduce using rule 37


State 126

	Expr7 -> '(' ListArg ')' '->' . Type Block          (rule 86)

	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 137

State 127

	ExprOrRef -> '&' Ident .                            (rule 92)

	')'            reduce using rule 92
	','            reduce using rule 92


State 128

	Expr6 -> Expr6 '(' ListExprOrRef ')' .              (rule 78)

	'!='           reduce using rule 78
	'%'            reduce using rule 78
	'('            reduce using rule 78
	')'            reduce using rule 78
	'*'            reduce using rule 78
	'+'            reduce using rule 78
	','            reduce using rule 78
	'-'            reduce using rule 78
	'.'            reduce using rule 78
	'/'            reduce using rule 78
	';'            reduce using rule 78
	'<'            reduce using rule 78
	'<='           reduce using rule 78
	'=='           reduce using rule 78
	'>'            reduce using rule 78
	'>='           reduce using rule 78
	'and'          reduce using rule 78
	'bool'         reduce using rule 78
	'false'        reduce using rule 78
	'for'          reduce using rule 78
	'fun'          reduce using rule 78
	'if'           reduce using rule 78
	'int'          reduce using rule 78
	'lambda'       reduce using rule 78
	'list'         reduce using rule 78
	'not'          reduce using rule 78
	'or'           reduce using rule 78
	'print'        reduce using rule 78
	'printEndl'    reduce using rule 78
	'return'       reduce using rule 78
	'string'       reduce using rule 78
	'to'           reduce using rule 78
	'true'         reduce using rule 78
	'void'         reduce using rule 78
	'while'        reduce using rule 78
	'}'            reduce using rule 78
	L_Ident        reduce using rule 78
	L_integ        reduce using rule 78
	L_quoted       reduce using rule 78
	%eof           reduce using rule 78


State 129

	ListExprOrRef -> ExprOrRef ',' . ListExprOrRef      (rule 95)

	'&'            shift, and enter state 98
	'('            shift, and enter state 18
	')'            reduce using rule 93
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 95
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17
	ExprOrRef      goto state 96
	ListExprOrRef  goto state 136

State 130

	Expr5 -> Expr6 '.' 'at' '(' . Expr6 ')'             (rule 77)

	'('            shift, and enter state 18
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr6          goto state 135
	Expr7          goto state 17

State 131

	Item -> Ident '=' Expr .                            (rule 25)

	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'bool'         reduce using rule 25
	'false'        reduce using rule 25
	'for'          reduce using rule 25
	'fun'          reduce using rule 25
	'if'           reduce using rule 25
	'int'          reduce using rule 25
	'lambda'       reduce using rule 25
	'list'         reduce using rule 25
	'not'          reduce using rule 25
	'print'        reduce using rule 25
	'printEndl'    reduce using rule 25
	'return'       reduce using rule 25
	'string'       reduce using rule 25
	'true'         reduce using rule 25
	'void'         reduce using rule 25
	'while'        reduce using rule 25
	'}'            reduce using rule 25
	L_Ident        reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25
	%eof           reduce using rule 25


State 132

	Stmt -> Ident '.' 'push' '(' . Expr ')'             (rule 23)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 134
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 133

	Stmt -> Ident '=' Expr ';' .                        (rule 21)

	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'bool'         reduce using rule 21
	'false'        reduce using rule 21
	'for'          reduce using rule 21
	'fun'          reduce using rule 21
	'if'           reduce using rule 21
	'int'          reduce using rule 21
	'lambda'       reduce using rule 21
	'list'         reduce using rule 21
	'not'          reduce using rule 21
	'print'        reduce using rule 21
	'printEndl'    reduce using rule 21
	'return'       reduce using rule 21
	'string'       reduce using rule 21
	'true'         reduce using rule 21
	'void'         reduce using rule 21
	'while'        reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21
	%eof           reduce using rule 21


State 134

	Stmt -> Ident '.' 'push' '(' Expr . ')'             (rule 23)

	')'            shift, and enter state 156


State 135

	Expr5 -> Expr6 '.' 'at' '(' Expr6 . ')'             (rule 77)
	Expr6 -> Expr6 . '(' ListExprOrRef ')'              (rule 78)

	'('            shift, and enter state 58
	')'            shift, and enter state 155


State 136

	ListExprOrRef -> ExprOrRef ',' ListExprOrRef .      (rule 95)

	')'            reduce using rule 95


State 137

	Expr7 -> '(' ListArg ')' '->' Type . Block          (rule 86)

	'{'            shift, and enter state 141

	Block          goto state 154

State 138

	Stmt -> 'for' '(' Ident 'from' Expr . 'to' Expr ')' Block    (rule 16)

	'to'           shift, and enter state 153


State 139

	Stmt -> 'fun' Ident '(' ListArg ')' . '->' Type Block    (rule 22)

	'->'           shift, and enter state 152


State 140

	Stmt -> 'if' '(' Expr ')' Block .                   (rule 13)
	Stmt -> 'if' '(' Expr ')' Block . 'else' Block      (rule 14)

	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'bool'         reduce using rule 13
	'else'         shift, and enter state 151
	'false'        reduce using rule 13
	'for'          reduce using rule 13
	'fun'          reduce using rule 13
	'if'           reduce using rule 13
	'int'          reduce using rule 13
	'lambda'       reduce using rule 13
	'list'         reduce using rule 13
	'not'          reduce using rule 13
	'print'        reduce using rule 13
	'printEndl'    reduce using rule 13
	'return'       reduce using rule 13
	'string'       reduce using rule 13
	'true'         reduce using rule 13
	'void'         reduce using rule 13
	'while'        reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 141

	Block -> '{' . ListStmt '}'                         (rule 5)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'for'          shift, and enter state 22
	'fun'          shift, and enter state 23
	'if'           shift, and enter state 24
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'print'        shift, and enter state 29
	'printEndl'    shift, and enter state 30
	'return'       shift, and enter state 31
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	'while'        shift, and enter state 35
	'}'            reduce using rule 8
			(reduce using rule 6)

	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 3
	Integer        goto state 4
	String         goto state 5
	ListStmt       goto state 150
	Stmt           goto state 8
	Type           goto state 9
	Expr           goto state 10
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 142

	Type -> 'lambda' '<' '(' ListTypeOrRef ')' . '->' Type '>'    (rule 43)

	'->'           shift, and enter state 149


State 143

	ListTypeOrRef -> TypeOrRef ',' . ListTypeOrRef      (rule 51)

	'&'            shift, and enter state 57
	')'            reduce using rule 49
	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 119
	TypeOrRef      goto state 120
	ListTypeOrRef  goto state 148

State 144

	Stmt -> 'print' '(' ListExpr ')' ';' .              (rule 17)

	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'bool'         reduce using rule 17
	'false'        reduce using rule 17
	'for'          reduce using rule 17
	'fun'          reduce using rule 17
	'if'           reduce using rule 17
	'int'          reduce using rule 17
	'lambda'       reduce using rule 17
	'list'         reduce using rule 17
	'not'          reduce using rule 17
	'print'        reduce using rule 17
	'printEndl'    reduce using rule 17
	'return'       reduce using rule 17
	'string'       reduce using rule 17
	'true'         reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17
	%eof           reduce using rule 17


State 145

	ListExpr -> Expr ',' ListExpr .                     (rule 30)
	ListExpr -> Expr ',' ListExpr .                     (rule 33)

	')'            reduce using rule 33
			(reduce using rule 30)



State 146

	Stmt -> 'printEndl' '(' ListExpr ')' ';' .          (rule 18)

	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'bool'         reduce using rule 18
	'false'        reduce using rule 18
	'for'          reduce using rule 18
	'fun'          reduce using rule 18
	'if'           reduce using rule 18
	'int'          reduce using rule 18
	'lambda'       reduce using rule 18
	'list'         reduce using rule 18
	'not'          reduce using rule 18
	'print'        reduce using rule 18
	'printEndl'    reduce using rule 18
	'return'       reduce using rule 18
	'string'       reduce using rule 18
	'true'         reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18
	%eof           reduce using rule 18


State 147

	Stmt -> 'while' '(' Expr ')' Block .                (rule 15)

	'('            reduce using rule 15
	'-'            reduce using rule 15
	';'            reduce using rule 15
	'bool'         reduce using rule 15
	'false'        reduce using rule 15
	'for'          reduce using rule 15
	'fun'          reduce using rule 15
	'if'           reduce using rule 15
	'int'          reduce using rule 15
	'lambda'       reduce using rule 15
	'list'         reduce using rule 15
	'not'          reduce using rule 15
	'print'        reduce using rule 15
	'printEndl'    reduce using rule 15
	'return'       reduce using rule 15
	'string'       reduce using rule 15
	'true'         reduce using rule 15
	'void'         reduce using rule 15
	'while'        reduce using rule 15
	'}'            reduce using rule 15
	L_Ident        reduce using rule 15
	L_integ        reduce using rule 15
	L_quoted       reduce using rule 15
	%eof           reduce using rule 15


State 148

	ListTypeOrRef -> TypeOrRef ',' ListTypeOrRef .      (rule 51)

	')'            reduce using rule 51


State 149

	Type -> 'lambda' '<' '(' ListTypeOrRef ')' '->' . Type '>'    (rule 43)

	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 161

State 150

	Block -> '{' ListStmt . '}'                         (rule 5)

	'}'            shift, and enter state 160


State 151

	Stmt -> 'if' '(' Expr ')' Block 'else' . Block      (rule 14)

	'{'            shift, and enter state 141

	Block          goto state 159

State 152

	Stmt -> 'fun' Ident '(' ListArg ')' '->' . Type Block    (rule 22)

	'bool'         shift, and enter state 20
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'string'       shift, and enter state 32
	'void'         shift, and enter state 34

	Type           goto state 158

State 153

	Stmt -> 'for' '(' Ident 'from' Expr 'to' . Expr ')' Block    (rule 16)

	'('            shift, and enter state 18
	'-'            shift, and enter state 19
	'bool'         shift, and enter state 20
	'false'        shift, and enter state 21
	'int'          shift, and enter state 25
	'lambda'       shift, and enter state 26
	'list'         shift, and enter state 27
	'not'          shift, and enter state 28
	'string'       shift, and enter state 32
	'true'         shift, and enter state 33
	'void'         shift, and enter state 34
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 36
	L_quoted       shift, and enter state 37

	Ident          goto state 39
	Integer        goto state 4
	String         goto state 5
	Type           goto state 40
	Expr           goto state 157
	Expr1          goto state 11
	Expr2          goto state 12
	Expr3          goto state 13
	Expr4          goto state 14
	Expr5          goto state 15
	Expr6          goto state 16
	Expr7          goto state 17

State 154

	Expr7 -> '(' ListArg ')' '->' Type Block .          (rule 86)

	'!='           reduce using rule 86
	'%'            reduce using rule 86
	'('            reduce using rule 86
	')'            reduce using rule 86
	'*'            reduce using rule 86
	'+'            reduce using rule 86
	','            reduce using rule 86
	'-'            reduce using rule 86
	'.'            reduce using rule 86
	'/'            reduce using rule 86
	';'            reduce using rule 86
	'<'            reduce using rule 86
	'<='           reduce using rule 86
	'=='           reduce using rule 86
	'>'            reduce using rule 86
	'>='           reduce using rule 86
	'and'          reduce using rule 86
	'bool'         reduce using rule 86
	'false'        reduce using rule 86
	'for'          reduce using rule 86
	'fun'          reduce using rule 86
	'if'           reduce using rule 86
	'int'          reduce using rule 86
	'lambda'       reduce using rule 86
	'list'         reduce using rule 86
	'not'          reduce using rule 86
	'or'           reduce using rule 86
	'print'        reduce using rule 86
	'printEndl'    reduce using rule 86
	'return'       reduce using rule 86
	'string'       reduce using rule 86
	'to'           reduce using rule 86
	'true'         reduce using rule 86
	'void'         reduce using rule 86
	'while'        reduce using rule 86
	'}'            reduce using rule 86
	L_Ident        reduce using rule 86
	L_integ        reduce using rule 86
	L_quoted       reduce using rule 86
	%eof           reduce using rule 86


State 155

	Expr5 -> Expr6 '.' 'at' '(' Expr6 ')' .             (rule 77)

	'!='           reduce using rule 77
	'%'            reduce using rule 77
	'('            reduce using rule 77
	')'            reduce using rule 77
	'*'            reduce using rule 77
	'+'            reduce using rule 77
	','            reduce using rule 77
	'-'            reduce using rule 77
	'/'            reduce using rule 77
	';'            reduce using rule 77
	'<'            reduce using rule 77
	'<='           reduce using rule 77
	'=='           reduce using rule 77
	'>'            reduce using rule 77
	'>='           reduce using rule 77
	'and'          reduce using rule 77
	'bool'         reduce using rule 77
	'false'        reduce using rule 77
	'for'          reduce using rule 77
	'fun'          reduce using rule 77
	'if'           reduce using rule 77
	'int'          reduce using rule 77
	'lambda'       reduce using rule 77
	'list'         reduce using rule 77
	'not'          reduce using rule 77
	'or'           reduce using rule 77
	'print'        reduce using rule 77
	'printEndl'    reduce using rule 77
	'return'       reduce using rule 77
	'string'       reduce using rule 77
	'to'           reduce using rule 77
	'true'         reduce using rule 77
	'void'         reduce using rule 77
	'while'        reduce using rule 77
	'}'            reduce using rule 77
	L_Ident        reduce using rule 77
	L_integ        reduce using rule 77
	L_quoted       reduce using rule 77
	%eof           reduce using rule 77


State 156

	Stmt -> Ident '.' 'push' '(' Expr ')' .             (rule 23)

	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'bool'         reduce using rule 23
	'false'        reduce using rule 23
	'for'          reduce using rule 23
	'fun'          reduce using rule 23
	'if'           reduce using rule 23
	'int'          reduce using rule 23
	'lambda'       reduce using rule 23
	'list'         reduce using rule 23
	'not'          reduce using rule 23
	'print'        reduce using rule 23
	'printEndl'    reduce using rule 23
	'return'       reduce using rule 23
	'string'       reduce using rule 23
	'true'         reduce using rule 23
	'void'         reduce using rule 23
	'while'        reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23
	%eof           reduce using rule 23


State 157

	Stmt -> 'for' '(' Ident 'from' Expr 'to' Expr . ')' Block    (rule 16)

	')'            shift, and enter state 164


State 158

	Stmt -> 'fun' Ident '(' ListArg ')' '->' Type . Block    (rule 22)

	'{'            shift, and enter state 141

	Block          goto state 163

State 159

	Stmt -> 'if' '(' Expr ')' Block 'else' Block .      (rule 14)

	'('            reduce using rule 14
	'-'            reduce using rule 14
	';'            reduce using rule 14
	'bool'         reduce using rule 14
	'false'        reduce using rule 14
	'for'          reduce using rule 14
	'fun'          reduce using rule 14
	'if'           reduce using rule 14
	'int'          reduce using rule 14
	'lambda'       reduce using rule 14
	'list'         reduce using rule 14
	'not'          reduce using rule 14
	'print'        reduce using rule 14
	'printEndl'    reduce using rule 14
	'return'       reduce using rule 14
	'string'       reduce using rule 14
	'true'         reduce using rule 14
	'void'         reduce using rule 14
	'while'        reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 160

	Block -> '{' ListStmt '}' .                         (rule 5)

	'!='           reduce using rule 5
	'%'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	'+'            reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'.'            reduce using rule 5
	'/'            reduce using rule 5
	';'            reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'and'          reduce using rule 5
	'bool'         reduce using rule 5
	'else'         reduce using rule 5
	'false'        reduce using rule 5
	'for'          reduce using rule 5
	'fun'          reduce using rule 5
	'if'           reduce using rule 5
	'int'          reduce using rule 5
	'lambda'       reduce using rule 5
	'list'         reduce using rule 5
	'not'          reduce using rule 5
	'or'           reduce using rule 5
	'print'        reduce using rule 5
	'printEndl'    reduce using rule 5
	'return'       reduce using rule 5
	'string'       reduce using rule 5
	'to'           reduce using rule 5
	'true'         reduce using rule 5
	'void'         reduce using rule 5
	'while'        reduce using rule 5
	'}'            reduce using rule 5
	L_Ident        reduce using rule 5
	L_integ        reduce using rule 5
	L_quoted       reduce using rule 5
	%eof           reduce using rule 5


State 161

	Type -> 'lambda' '<' '(' ListTypeOrRef ')' '->' Type . '>'    (rule 43)

	'>'            shift, and enter state 162


State 162

	Type -> 'lambda' '<' '(' ListTypeOrRef ')' '->' Type '>' .    (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'>'            reduce using rule 43
	'[]'           reduce using rule 43
	'{'            reduce using rule 43
	L_Ident        reduce using rule 43


State 163

	Stmt -> 'fun' Ident '(' ListArg ')' '->' Type Block .    (rule 22)

	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'bool'         reduce using rule 22
	'false'        reduce using rule 22
	'for'          reduce using rule 22
	'fun'          reduce using rule 22
	'if'           reduce using rule 22
	'int'          reduce using rule 22
	'lambda'       reduce using rule 22
	'list'         reduce using rule 22
	'not'          reduce using rule 22
	'print'        reduce using rule 22
	'printEndl'    reduce using rule 22
	'return'       reduce using rule 22
	'string'       reduce using rule 22
	'true'         reduce using rule 22
	'void'         reduce using rule 22
	'while'        reduce using rule 22
	'}'            reduce using rule 22
	L_Ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22
	%eof           reduce using rule 22


State 164

	Stmt -> 'for' '(' Ident 'from' Expr 'to' Expr ')' . Block    (rule 16)

	'{'            shift, and enter state 141

	Block          goto state 165

State 165

	Stmt -> 'for' '(' Ident 'from' Expr 'to' Expr ')' Block .    (rule 16)

	'('            reduce using rule 16
	'-'            reduce using rule 16
	';'            reduce using rule 16
	'bool'         reduce using rule 16
	'false'        reduce using rule 16
	'for'          reduce using rule 16
	'fun'          reduce using rule 16
	'if'           reduce using rule 16
	'int'          reduce using rule 16
	'lambda'       reduce using rule 16
	'list'         reduce using rule 16
	'not'          reduce using rule 16
	'print'        reduce using rule 16
	'printEndl'    reduce using rule 16
	'return'       reduce using rule 16
	'string'       reduce using rule 16
	'true'         reduce using rule 16
	'void'         reduce using rule 16
	'while'        reduce using rule 16
	'}'            reduce using rule 16
	L_Ident        reduce using rule 16
	L_integ        reduce using rule 16
	L_quoted       reduce using rule 16
	%eof           reduce using rule 16


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 96
Number of terminals: 49
Number of non-terminals: 31
Number of states: 166
