-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language grammar.

module AbsGrammar where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = Block [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = Decl Type Item
    | SExp Expr
    | If Expr Block
    | IfElse Expr Block Block
    | While Expr Block
    | For Ident Expr Expr Block
    | ForIn Ident Expr Block
    | Print Expr
    | Return Expr
    | ReturnVoIdent
    | Assign Ident Expr
    | FunDef Ident [Arg] Type Block
    | ListPush Ident Expr
    | StructDef Ident [StructItem]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = Arg Type Ident | ArgRef Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = TInt | TBool | TString | TVoid | TList Type | TStruct Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeOrRef = TRType Type | TRRef Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Mul | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EOr Expr Expr
    | EAnd Expr Expr
    | ERel Expr RelOp Expr
    | EAdd Expr AddOp Expr
    | EMul Expr MulOp Expr
    | ENeg Expr
    | ENot Expr
    | EApp Expr [ExprOrRef]
    | EInt Integer
    | EVar Ident
    | ETrue
    | EFalse
    | EEmptyList Type
    | EString String
    | ListLen Expr
    | ListAt Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExprOrRef = EorRExpr Expr | EorRRef Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructItem = StructItem Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

