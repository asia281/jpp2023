-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGrammar
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGrammar
import LexGrammar

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='     { PT _ (TS _ 1)  }
  '%'      { PT _ (TS _ 2)  }
  '&'      { PT _ (TS _ 3)  }
  '('      { PT _ (TS _ 4)  }
  ')'      { PT _ (TS _ 5)  }
  '*'      { PT _ (TS _ 6)  }
  '+'      { PT _ (TS _ 7)  }
  ','      { PT _ (TS _ 8)  }
  '-'      { PT _ (TS _ 9)  }
  '->'     { PT _ (TS _ 10) }
  '.'      { PT _ (TS _ 11) }
  '/'      { PT _ (TS _ 12) }
  ';'      { PT _ (TS _ 13) }
  '<'      { PT _ (TS _ 14) }
  '<='     { PT _ (TS _ 15) }
  '='      { PT _ (TS _ 16) }
  '=='     { PT _ (TS _ 17) }
  '>'      { PT _ (TS _ 18) }
  '>='     { PT _ (TS _ 19) }
  '[]'     { PT _ (TS _ 20) }
  'and'    { PT _ (TS _ 21) }
  'at'     { PT _ (TS _ 22) }
  'bool'   { PT _ (TS _ 23) }
  'else'   { PT _ (TS _ 24) }
  'false'  { PT _ (TS _ 25) }
  'for'    { PT _ (TS _ 26) }
  'from'   { PT _ (TS _ 27) }
  'fun'    { PT _ (TS _ 28) }
  'if'     { PT _ (TS _ 29) }
  'in'     { PT _ (TS _ 30) }
  'int'    { PT _ (TS _ 31) }
  'lambda' { PT _ (TS _ 32) }
  'len()'  { PT _ (TS _ 33) }
  'list'   { PT _ (TS _ 34) }
  'not'    { PT _ (TS _ 35) }
  'or'     { PT _ (TS _ 36) }
  'print'  { PT _ (TS _ 37) }
  'push'   { PT _ (TS _ 38) }
  'return' { PT _ (TS _ 39) }
  'string' { PT _ (TS _ 40) }
  'struct' { PT _ (TS _ 41) }
  'to'     { PT _ (TS _ 42) }
  'true'   { PT _ (TS _ 43) }
  'void'   { PT _ (TS _ 44) }
  'while'  { PT _ (TS _ 45) }
  '{'      { PT _ (TS _ 46) }
  '}'      { PT _ (TS _ 47) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }
  L_quoted { PT _ (TL $$)   }

%%

Ident :: { AbsGrammar.Ident }
Ident  : L_Ident { AbsGrammar.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsGrammar.Program }
Program : ListStmt { AbsGrammar.Program $1 }

Block :: { AbsGrammar.Block }
Block : '{' ListStmt '}' { AbsGrammar.Block $2 }

ListStmt :: { [AbsGrammar.Stmt] }
ListStmt
  : {- empty -} { [] }
  | Stmt { (:[]) $1 }
  | Stmt ';' ListStmt { (:) $1 $3 }
  | {- empty -} { [] }
  | Stmt { (:[]) $1 }
  | Stmt ';' ListStmt { (:) $1 $3 }

Stmt :: { AbsGrammar.Stmt }
Stmt
  : Type Item { AbsGrammar.Decl $1 $2 }
  | Expr { AbsGrammar.SExp $1 }
  | 'if' '(' Expr ')' Block { AbsGrammar.If $3 $5 }
  | 'if' '(' Expr ')' Block 'else' Block { AbsGrammar.IfElse $3 $5 $7 }
  | 'while' '(' Expr ')' Block { AbsGrammar.While $3 $5 }
  | 'for' '(' Ident 'from' Expr 'to' Expr ')' Block { AbsGrammar.For $3 $5 $7 $9 }
  | 'for' '(' Ident 'in' Expr ')' Block { AbsGrammar.ForIn $3 $5 $7 }
  | 'print' '(' ListExpr ')' { AbsGrammar.Print $3 }
  | 'return' Expr { AbsGrammar.Return $2 }
  | 'return' { AbsGrammar.ReturnVoid }
  | Ident '=' Expr { AbsGrammar.Assign $1 $3 }
  | 'fun' Ident '(' ListArg ')' '->' Type Block { AbsGrammar.FunDef $2 $4 $7 $8 }
  | Ident '.' 'push' '(' Expr ')' { AbsGrammar.ListPush $1 $5 }
  | 'struct' Ident '{' ListStructItem '}' { AbsGrammar.StructDef $2 $4 }

Item :: { AbsGrammar.Item }
Item
  : Ident { AbsGrammar.NoInit $1 }
  | Ident '=' Expr { AbsGrammar.Init $1 $3 }

ListItem :: { [AbsGrammar.Item] }
ListItem : Item { (:[]) $1 } | Item ',' ListItem { (:) $1 $3 }

ListExpr :: { [AbsGrammar.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }
  | {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

Arg :: { AbsGrammar.Arg }
Arg
  : Type Ident { AbsGrammar.Arg $1 $2 }
  | '&' Type Ident { AbsGrammar.ArgRef $2 $3 }

ListArg :: { [AbsGrammar.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Type :: { AbsGrammar.Type }
Type
  : 'int' { AbsGrammar.TInt }
  | 'bool' { AbsGrammar.TBool }
  | 'string' { AbsGrammar.TString }
  | 'void' { AbsGrammar.TVoid }
  | 'list' '<' Type '>' { AbsGrammar.TList $3 }
  | 'struct' Ident { AbsGrammar.TStruct $2 }
  | 'lambda' '<' '(' ListTypeOrRef ')' '->' Type '>' { AbsGrammar.TFun $4 $7 }

ListType :: { [AbsGrammar.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

TypeOrRef :: { AbsGrammar.TypeOrRef }
TypeOrRef
  : Type { AbsGrammar.TRType $1 } | '&' Type { AbsGrammar.TRRef $2 }

ListTypeOrRef :: { [AbsGrammar.TypeOrRef] }
ListTypeOrRef
  : {- empty -} { [] }
  | TypeOrRef { (:[]) $1 }
  | TypeOrRef ',' ListTypeOrRef { (:) $1 $3 }

AddOp :: { AbsGrammar.AddOp }
AddOp : '+' { AbsGrammar.Plus } | '-' { AbsGrammar.Minus }

MulOp :: { AbsGrammar.MulOp }
MulOp
  : '*' { AbsGrammar.Mul }
  | '/' { AbsGrammar.Div }
  | '%' { AbsGrammar.Mod }

RelOp :: { AbsGrammar.RelOp }
RelOp
  : '<' { AbsGrammar.LTH }
  | '<=' { AbsGrammar.LE }
  | '>' { AbsGrammar.GTH }
  | '>=' { AbsGrammar.GE }
  | '==' { AbsGrammar.EQ }
  | '!=' { AbsGrammar.NEQ }

Expr :: { AbsGrammar.Expr }
Expr : Expr1 'or' Expr { AbsGrammar.EOr $1 $3 } | Expr1 { $1 }

Expr1 :: { AbsGrammar.Expr }
Expr1 : Expr2 'and' Expr1 { AbsGrammar.EAnd $1 $3 } | Expr2 { $1 }

Expr2 :: { AbsGrammar.Expr }
Expr2
  : Expr2 RelOp Expr3 { AbsGrammar.ERel $1 $2 $3 } | Expr3 { $1 }

Expr3 :: { AbsGrammar.Expr }
Expr3
  : Expr3 AddOp Expr4 { AbsGrammar.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr4 :: { AbsGrammar.Expr }
Expr4
  : Expr4 MulOp Expr5 { AbsGrammar.EMul $1 $2 $3 } | Expr5 { $1 }

Expr5 :: { AbsGrammar.Expr }
Expr5
  : '-' Expr6 { AbsGrammar.ENeg $2 }
  | 'not' Expr6 { AbsGrammar.ENot $2 }
  | Expr6 { $1 }
  | Expr6 '.' 'len()' { AbsGrammar.ListLen $1 }
  | Expr6 '.' 'at' '(' Expr6 ')' { AbsGrammar.ListAt $1 $5 }

Expr6 :: { AbsGrammar.Expr }
Expr6
  : Expr6 '(' ListExprOrRef ')' { AbsGrammar.EApp $1 $3 }
  | Expr7 { $1 }

Expr7 :: { AbsGrammar.Expr }
Expr7
  : Integer { AbsGrammar.EInt $1 }
  | Ident { AbsGrammar.EVar $1 }
  | 'true' { AbsGrammar.ETrue }
  | 'false' { AbsGrammar.EFalse }
  | Type '[]' { AbsGrammar.EEmptyList $1 }
  | String { AbsGrammar.EString $1 }
  | 'lambda' Ident '(' ListArg ')' '->' Type Block { AbsGrammar.ELambda $2 $4 $7 $8 }
  | '(' Expr ')' { $2 }

ExprOrRef :: { AbsGrammar.ExprOrRef }
ExprOrRef
  : Expr { AbsGrammar.EorRExpr $1 }
  | '&' Ident { AbsGrammar.EorRRef $2 }

ListExprOrRef :: { [AbsGrammar.ExprOrRef] }
ListExprOrRef
  : {- empty -} { [] }
  | ExprOrRef { (:[]) $1 }
  | ExprOrRef ',' ListExprOrRef { (:) $1 $3 }

StructItem :: { AbsGrammar.StructItem }
StructItem : Type Ident { AbsGrammar.StructItem $1 $2 }

ListStructItem :: { [AbsGrammar.StructItem] }
ListStructItem
  : {- empty -} { [] }
  | StructItem { (:[]) $1 }
  | StructItem ';' ListStructItem { (:) $1 $3 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

