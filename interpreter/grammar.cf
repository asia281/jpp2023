-- Programs ------------------------------------------------

entrypoints Program ;
Program.   Program ::= [ Stmt ] ;

Block.     Block ::= "{" [Stmt] "}" ;
separator  Stmt ";" ;

Decl.      Stmt ::= Type Item ;
NoInit.    Item ::= Id ; 
Init.      Item ::= Id "=" Expr ;
separator nonempty Item "," ;


separator  Stmt ";" ;
SExp.      Stmt ::= Expr ;


If.      Stmt ::= "if" "(" Expr ")" Block ;
IfElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block ;

While.     Stmt ::= "while" "(" Expr ")" Block ;
For.       Stmt ::= "for" "(" Id "from" Expr "to" Expr ")" Block ;
ForIn.     Stmt ::= "for" "(" Id "in" Expr ")" Block ;

Print.     Stmt ::= "print" "(" Expr ")" ;

Return.    Stmt ::= "return" Expr ;
ReturnVoid.   Stmt ::= "return" ;
Assign.    Stmt ::= Id ":=" Expr ;

FunDef.  Stmt ::= "fun" Id "(" [Arg] ")" "->" Type Block ;



-- Types ---------------------------------------------------

TInt.       Type ::= "int" ;
TBool.      Type ::= "bool" ;
TString.    Type ::= "string" ;
TVoid.      Type ::= "void" ;
TList.      Type ::= "list" "<" Type ">" ;
TStruct.    Type ::= "struct" Id ;
separator   Type "," ;

TRType.     TypeOrRef ::= Type ;
TRRef.      TypeOrRef ::= "&" Type ;
separator      TypeOrRef "," ;


-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Expression ------------------------------------------------
ENeg.      Expr5 ::= "-" Expr6 ;
ENot.      Expr5 ::= "not" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "and" Expr1 ;
EOr.       Expr0 ::= Expr1 "or" Expr0 ;

-- Comments ------------------------------------------------

comment    "#" ;
comment    "{*" "*}" ;


-- List operations -----------------------------------------
ListPush.  Stmt ::= Id "::" "push" Expr ;
ListLen.   Expr5 ::= Expr6 "." "len" ;
ListAt.    Expr5 ::= Expr6 "." "at" Expr6 ;


-- Structs -------------------------------------------------

-- StructDef. Stmt ::= "struct" Id "{" [StructItem] "}" ;
-- StructItem. StructItem ::= Type Id ;
-- separator StructItem ";" ;


