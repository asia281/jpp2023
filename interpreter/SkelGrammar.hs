-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: AbsGrammar.Program -> Result
transProgram x = case x of
  AbsGrammar.Program stmts -> failure x

transBlock :: AbsGrammar.Block -> Result
transBlock x = case x of
  AbsGrammar.Block stmts -> failure x

transStmt :: AbsGrammar.Stmt -> Result
transStmt x = case x of
  AbsGrammar.Decl type_ item -> failure x
  AbsGrammar.SExp expr -> failure x
  AbsGrammar.If expr block -> failure x
  AbsGrammar.IfElse expr block1 block2 -> failure x
  AbsGrammar.While expr block -> failure x
  AbsGrammar.For ident expr1 expr2 block -> failure x
  AbsGrammar.ForIn ident expr block -> failure x
  AbsGrammar.Print exprs -> failure x
  AbsGrammar.Return expr -> failure x
  AbsGrammar.ReturnVoid -> failure x
  AbsGrammar.Assign ident expr -> failure x
  AbsGrammar.FunDef ident args type_ block -> failure x
  AbsGrammar.SListPush ident expr -> failure x
  AbsGrammar.StructDef ident structitems -> failure x

transItem :: AbsGrammar.Item -> Result
transItem x = case x of
  AbsGrammar.NoInit ident -> failure x
  AbsGrammar.Init ident expr -> failure x

transArg :: AbsGrammar.Arg -> Result
transArg x = case x of
  AbsGrammar.Arg type_ ident -> failure x
  AbsGrammar.ArgRef type_ ident -> failure x

transType :: AbsGrammar.Type -> Result
transType x = case x of
  AbsGrammar.TInt -> failure x
  AbsGrammar.TBool -> failure x
  AbsGrammar.TString -> failure x
  AbsGrammar.TVoid -> failure x
  AbsGrammar.TList type_ -> failure x
  AbsGrammar.TStruct ident -> failure x
  AbsGrammar.TFun typeorrefs type_ -> failure x

transTypeOrRef :: AbsGrammar.TypeOrRef -> Result
transTypeOrRef x = case x of
  AbsGrammar.TRType type_ -> failure x
  AbsGrammar.TRRef type_ -> failure x

transAddOp :: AbsGrammar.AddOp -> Result
transAddOp x = case x of
  AbsGrammar.Plus -> failure x
  AbsGrammar.Minus -> failure x

transMulOp :: AbsGrammar.MulOp -> Result
transMulOp x = case x of
  AbsGrammar.Mul -> failure x
  AbsGrammar.Div -> failure x
  AbsGrammar.Mod -> failure x

transRelOp :: AbsGrammar.RelOp -> Result
transRelOp x = case x of
  AbsGrammar.LTH -> failure x
  AbsGrammar.LE -> failure x
  AbsGrammar.GTH -> failure x
  AbsGrammar.GE -> failure x
  AbsGrammar.EQ -> failure x
  AbsGrammar.NEQ -> failure x

transExpr :: AbsGrammar.Expr -> Result
transExpr x = case x of
  AbsGrammar.EOr expr1 expr2 -> failure x
  AbsGrammar.EAnd expr1 expr2 -> failure x
  AbsGrammar.ERel expr1 relop expr2 -> failure x
  AbsGrammar.EAdd expr1 addop expr2 -> failure x
  AbsGrammar.EMul expr1 mulop expr2 -> failure x
  AbsGrammar.ENeg expr -> failure x
  AbsGrammar.ENot expr -> failure x
  AbsGrammar.EApp expr exprorrefs -> failure x
  AbsGrammar.EInt integer -> failure x
  AbsGrammar.EVar ident -> failure x
  AbsGrammar.ETrue -> failure x
  AbsGrammar.EFalse -> failure x
  AbsGrammar.EEmptyList type_ -> failure x
  AbsGrammar.EString string -> failure x
  AbsGrammar.ELambda ident args type_ block -> failure x
  AbsGrammar.EListLen expr -> failure x
  AbsGrammar.EListAt expr1 expr2 -> failure x

transExprOrRef :: AbsGrammar.ExprOrRef -> Result
transExprOrRef x = case x of
  AbsGrammar.EorRExpr expr -> failure x
  AbsGrammar.EorRRef ident -> failure x

transStructItem :: AbsGrammar.StructItem -> Result
transStructItem x = case x of
  AbsGrammar.StructItem type_ ident -> failure x
